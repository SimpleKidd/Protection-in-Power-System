<ui_settings>
    <version>2.8</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.
]]></initialization_code>
    <components>
        <component_data>
                <id>7aee758f909e11e7980b4c34882a0abb</id>
                <name><![CDATA[Capture_Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>256</x>
                    <y>0</y>
                    <width>120</width>
                    <height>120</height>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Scope</state>
                    <layout>None</layout>
                    <virtual_signals_definitions>
                    </virtual_signals_definitions>
                    <presets>
                        <active_capture_preset><![CDATA[Default]]></active_capture_preset>
                        <active_scope_preset><![CDATA[Default]]></active_scope_preset>
                        <capture name="Default">
                            <time_interval>0.01</time_interval>
                            <sample_rate>500000.0</sample_rate>
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                                <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[Three-phase Meter1.IA]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[Three-phase Meter1.IB]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[Three-phase Meter1.IC]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <virtual_signals>
                            </virtual_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>True</is_force>
                                <type>Analog</type>
                                <source><![CDATA[Three-phase Meter1.IA]]></source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>4</show_viewports>
                            <decimation>2</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                                <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Va]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>3</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Vb]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>4</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Vc]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>5</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>3</channel>
                                    <name><![CDATA[Three-phase Meter2.VAn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>6</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>4</channel>
                                    <name><![CDATA[Three-phase Meter2.VBn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>7</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>5</channel>
                                    <name><![CDATA[Three-phase Meter2.VCn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>8</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>6</channel>
                                    <name><![CDATA[Three-phase Meter1.VAn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>7</channel>
                                    <name><![CDATA[Three-phase Meter1.VBn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                                <analog>
                                    <channel>8</channel>
                                    <name><![CDATA[Three-phase Meter1.VCn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Wind Power Plant (Switching).Va</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>0.01</time_interval>
                        <sample_rate>500000.0</sample_rate>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>Three-phase Meter1.IA</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>
                        <analog_signals>
                            <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[Three-phase Meter1.IA]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[Three-phase Meter1.IB]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[Three-phase Meter1.IC]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                        </analog_signals>
                         <digital_signals>
                         </digital_signals>
                    </capture>
                    <scope>
                        <time_base>0.005 </time_base>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>Wind Power Plant (Switching).Va</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>
                         <analog_signals>
                            <analog>
                                    <channel>0</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Va]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>3</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>1</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Vb]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>4</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>2</channel>
                                    <name><![CDATA[Wind Power Plant (Switching).Vc]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>5</row>
                                    <viewports>
                                        <num_viewport>1</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>3</channel>
                                    <name><![CDATA[Three-phase Meter2.VAn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>6</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>4</channel>
                                    <name><![CDATA[Three-phase Meter2.VBn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>7</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>5</channel>
                                    <name><![CDATA[Three-phase Meter2.VCn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>8</row>
                                    <viewports>
                                        <num_viewport>4</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>6</channel>
                                    <name><![CDATA[Three-phase Meter1.VAn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>0</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>7</channel>
                                    <name><![CDATA[Three-phase Meter1.VBn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>1</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                            <analog>
                                    <channel>8</channel>
                                    <name><![CDATA[Three-phase Meter1.VCn]]></name>
                                    <is_locked>False</is_locked>
                                    <vertical_scale>Auto</vertical_scale>
                                    <vertical_offset>0.0</vertical_offset>
                                    <coupling>False</coupling>
                                    <row>2</row>
                                    <viewports>
                                        <num_viewport>3</num_viewport>
                                   </viewports>
                               </analog>
                        </analog_signals>
                        <digital_signals>
                        </digital_signals>
                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>c4b73bd8076511e882a04c34882a0abb</id>
                <name><![CDATA[Set grid]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API



]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers.
# HIL API


hil.set_source_sine_waveform('Vs1', rms = 480.0/(3**0.5), frequency = 50.0, phase = 0.0,harmonics_pu = ())

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API



]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <widget_settings>
                    <x>256</x>
                    <y>136</y>
                    <width>136</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9d88cb075ee211efa41ffb2f942aabfa</id>
                <name><![CDATA[Wind power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Three-phase Meter1.POWER_P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'Three-phase Meter1.POWER_P': 1.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>408</x>
                    <y>16</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3a941704604a11efa7d1fb2f942aabfa</id>
                <name><![CDATA[Grid current ph-A]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Grid Simulator1.I_phase_A']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'Grid Simulator1.I_phase_A': 1.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>16</x>
                    <y>424</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>426c1ce9604a11efa2e3fb2f942aabfa</id>
                <name><![CDATA[Grid voltage ph-A]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Grid Simulator1.V_phase_A']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'Grid Simulator1.V_phase_A': 1.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>0</x>
                    <y>216</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>878f557561e611efb1a0fb2f942aabfa</id>
                <name><![CDATA[Three-phase Meter2_I_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter2.I_RMS]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1024</x>
                    <y>16</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>8ea1355361e611ef8beafb2f942aabfa</id>
                <name><![CDATA[Three-phase Meter2_VLL_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter2.VLL_RMS]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1024</x>
                    <y>80</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>27f0f68b65c311ef85cba2f213670ca5</id>
                <name><![CDATA[Three-phase Meter1_I_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter1.I_RMS]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>16</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2c81c0fe65c311efac87a2f213670ca5</id>
                <name><![CDATA[Three-phase Meter1_VLL_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter1.VLL_RMS]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>80</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3284de2465c311efb831a2f213670ca5</id>
                <name><![CDATA[Three-phase Meter1_POWER_P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter1.POWER_P]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>144</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>96bc88f2682211ef91cea2f213670ca5</id>
                <name><![CDATA[Three-phase Meter2_POWER_P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter2.POWER_P]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1024</x>
                    <y>144</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2d209a91683711ef8463a2f213670ca5</id>
                <name><![CDATA[Relay current]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[['(50) Instantaneous Overcurrent1.TRIP-INST']]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>408</x>
                    <y>224</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e084c611efaec8c28239ba6b76</id>
                <name><![CDATA[Wind Power Plant]]></name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['94b127e184c611efa435c28239ba6b76', '94b127e284c611efae5ac28239ba6b76', '94b127e384c611ef8e2bc28239ba6b76', '94b127e484c611efab84c28239ba6b76', '94b127e584c611ef80d2c28239ba6b76', '94b127e684c611ef80e3c28239ba6b76', '94b127e784c611efa07ac28239ba6b76', '94b127e884c611efb07ec28239ba6b76', '94b35e1a84c611ef8dafc28239ba6b76', '94b35e1b84c611ef8e3bc28239ba6b76', '94b35e1c84c611efaddfc28239ba6b76', '94b35e1d84c611ef9706c28239ba6b76', '94b35e1e84c611efba90c28239ba6b76', '94b35e1f84c611efa485c28239ba6b76', '94b35e2084c611efb810c28239ba6b76', '94b35e2184c611efb0d0c28239ba6b76', '94b35e2284c611ef9c1cc28239ba6b76', '94b35e2384c611ef88cfc28239ba6b76', '94b35e2484c611ef92ecc28239ba6b76', '94b35e2584c611efaef9c28239ba6b76', '94b35e2684c611ef9cd7c28239ba6b76', '94b35e2784c611efa5ddc28239ba6b76', '94b35e2884c611ef89b2c28239ba6b76']]]></components_ids>
                <working_mode>Embedded</working_mode>
                <canvas_window_visible>False</canvas_window_visible>
                <canvas_window_geometry><![CDATA[None]]></canvas_window_geometry>
                <canvas_window_state><![CDATA[None]]></canvas_window_state>
                <canvas_window_in_fullscreen>False</canvas_window_in_fullscreen>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\AppData\Roaming\typhoon\2024.3\examples\models\microgrid\wind turbine\wind power plant (switching)\wind_power_plant.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "Wind Power Plant (Switching)."
path_to_inputs = "Wind_in."
path_to_outputs = "Wind_out."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 1.5e6 #VA
Vb = 480 #V
fb = 60.0 #Hz
Vdc = 1000  # V

]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>16</x>
                    <y>8</y>
                    <width>224</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">Wind Power Plant</span></p></body></html>]]></label>
                    <use_label>True</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>94b127e184c611efa435c28239ba6b76</id>
                <name><![CDATA[Q [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")
displayValue = Q/Sb

]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>272</x>
                    <y>184</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-0.5</y_range_min>
                    <y_range_max>0.5</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")/Sb

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e284c611efae5ac28239ba6b76</id>
                <name><![CDATA[Vt]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name = path_to_component + "Control.PLL.Vt_meas")
displayValue = V*((3.0/2.0)**0.5)/Vb

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Vt_meas]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>736</x>
                    <y>512</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e384c611ef8e2bc28239ba6b76</id>
                <name><![CDATA[Qref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Qref")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.Grid_follow.Qref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>576</x>
                    <y>512</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e484c611efab84c28239ba6b76</id>
                <name><![CDATA[Qmeas]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")
displayValue = Q/Sb

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Q]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>656</x>
                    <y>512</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e584c611ef80d2c28239ba6b76</id>
                <name><![CDATA[Id_meas]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.id")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.id]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>896</x>
                    <y>456</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e684c611ef80e3c28239ba6b76</id>
                <name><![CDATA[Id_ref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Id_ref")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Id_ref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>816</x>
                    <y>456</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e784c611efa07ac28239ba6b76</id>
                <name><![CDATA[Iq_meas]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.iq")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.Grid_follow.iq]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>896</x>
                    <y>512</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b127e884c611efb07ec28239ba6b76</id>
                <name><![CDATA[Inverter Control]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['94b127e984c611efb26ac28239ba6b76', '94b127ea84c611efb319c28239ba6b76', '94b127eb84c611ef9494c28239ba6b76', '94b127ec84c611efb0c2c28239ba6b76', '94b127ed84c611efb8ecc28239ba6b76', '94b127ee84c611ef8d1ac28239ba6b76', '94b127ef84c611ef9b01c28239ba6b76', '94b127f084c611efb774c28239ba6b76', '94b127f184c611efbfe0c28239ba6b76', '94b35e1984c611efb288c28239ba6b76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>616</x>
                    <y>0</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>94b127e984c611efb26ac28239ba6b76</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>0</x>
                    <y>24</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127ea84c611efb319c28239ba6b76</id>
                <name><![CDATA[Connect]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>0</x>
                    <y>0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127eb84c611ef9494c28239ba6b76</id>
                <name><![CDATA[Connected]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "S1_fb")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>88</x>
                    <y>0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127ec84c611efb0c2c28239ba6b76</id>
                <name><![CDATA[Enabled]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "enable")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>88</x>
                    <y>24</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127ed84c611efb8ecc28239ba6b76</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "On")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>184</x>
                    <y>16</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127ee84c611ef8d1ac28239ba6b76</id>
                <name><![CDATA[Q mode On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Qmode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Grid_follow.Qmode")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>88</x>
                    <y>48</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127ef84c611ef9b01c28239ba6b76</id>
                <name><![CDATA[Q mode]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <widget_settings>
                    <x>0</x>
                    <y>48</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127f084c611efb774c28239ba6b76</id>
                <name><![CDATA[wind_speed]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'wind_speed', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 10.0
hil.set_scada_input_value(path_to_inputs + 'wind_speed', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[10.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[m/s]]></unit>
                <widget_settings>
                    <x>0</x>
                    <y>88</y>
                    <width>232</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b127f184c611efbfe0c28239ba6b76</id>
                <name><![CDATA[Reactive Power Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'Q_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(path_to_inputs + 'Q_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <widget_settings>
                    <x>0</x>
                    <y>136</y>
                    <width>240</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1984c611efb288c28239ba6b76</id>
                <name><![CDATA[Voltage Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'V_ref', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 480.0
hil.set_scada_input_value(path_to_inputs + 'V_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[480.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[V (line to line)]]></unit>
                <widget_settings>
                    <x>0</x>
                    <y>112</y>
                    <width>280</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1a84c611ef8dafc28239ba6b76</id>
                <name><![CDATA[Iq_ref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Iq_ref")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.Grid_follow.Iq_ref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>816</x>
                    <y>512</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1b84c611ef8e3bc28239ba6b76</id>
                <name><![CDATA[Pref]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Pref")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Pref]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>576</x>
                    <y>456</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1c84c611efaddfc28239ba6b76</id>
                <name><![CDATA[DC_voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Vdc")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Vdc]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <decimals>2</decimals>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>32</x>
                    <y>0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1d84c611ef9706c28239ba6b76</id>
                <name><![CDATA[freq [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.PLL.f_meas")
displayValue = f/fb]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.f_meas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>280</x>
                    <y>360</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 1.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1e84c611efba90c28239ba6b76</id>
                <name><![CDATA[P [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/Sb

]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>0</x>
                    <y>184</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1.1</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")/Sb

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e1f84c611efa485c28239ba6b76</id>
                <name><![CDATA[P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/Sb

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>656</x>
                    <y>456</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2084c611efb810c28239ba6b76</id>
                <name><![CDATA[S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.S")
displayValue = S/Sb

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.S]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>736</x>
                    <y>456</y>
                    <width>80</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2184c611efb0d0c28239ba6b76</id>
                <name><![CDATA[Vt [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name = path_to_component + "Control.PLL.Vt_meas")
displayValue = V*((3.0/2.0)**0.5)/Vb

]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.Vt_meas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>0</x>
                    <y>360</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 1.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2284c611ef9c1cc28239ba6b76</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>248</x>
                    <y>64</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2384c611ef88cfc28239ba6b76</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")
displayValue = Q/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>392</x>
                    <y>64</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2484c611ef92ecc28239ba6b76</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.S")
displayValue = S/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>248</x>
                    <y>120</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2584c611efaef9c28239ba6b76</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name = path_to_component + "Control.PLL.Vt_meas")
displayValue = V*((3.0/2.0)**0.5)]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Vt_meas]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>392</x>
                    <y>8</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2684c611ef9cd7c28239ba6b76</id>
                <name><![CDATA[Power factor]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
pf = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.pf")
displayValue = pf

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>392</x>
                    <y>120</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2784c611efa5ddc28239ba6b76</id>
                <name><![CDATA[Frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.PLL.f_meas")
displayValue = f]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.PLL.f_meas]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>248</x>
                    <y>8</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[2]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2884c611ef89b2c28239ba6b76</id>
                <name><![CDATA[Outputs]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['94b35e2984c611ef9ea0c28239ba6b76', '94b35e2a84c611efbd47c28239ba6b76', '94b35e2b84c611efad2bc28239ba6b76', '94b35e2c84c611ef9b9dc28239ba6b76', '94b35e2d84c611efb4c6c28239ba6b76', '94b35e2e84c611efbc7dc28239ba6b76', '94b35e2f84c611ef8482c28239ba6b76', '94b35e3084c611ef90a4c28239ba6b76', '94b35e3184c611efa98ac28239ba6b76']]]></components_ids>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <library_widget_help><![CDATA[None]]></library_widget_help>
                <widget_settings>
                    <x>568</x>
                    <y>200</y>
                    <width>416</width>
                    <height>240</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                    <hierarchy_position>2</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                
                <linked_model_components_settings>
                    </linked_model_components_settings>
            </component_data>
        <component_data>
                <id>94b35e2984c611ef9ea0c28239ba6b76</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Outputs 2 to 4 and 6 to 8 are instantenous values for currents and voltages, </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">thus, they are better observed in the scope.</p></body></html>]]></text>
                <widget_settings>
                    <x>8</x>
                    <y>176</y>
                    <width>376</width>
                    <height>32</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>3</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2a84c611efbd47c28239ba6b76</id>
                <name><![CDATA[Out [0] - Connected]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[0]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[0]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>32</x>
                    <y>0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2b84c611efad2bc28239ba6b76</id>
                <name><![CDATA[Out [1] - Inverter On]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[1]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[1]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>144</x>
                    <y>0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2c84c611ef9b9dc28239ba6b76</id>
                <name><![CDATA[Out [5] - Vt]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[5]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[5]]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>256</x>
                    <y>0</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2d84c611efb4c6c28239ba6b76</id>
                <name><![CDATA[Out [9] - f]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[9]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[9]]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>0</x>
                    <y>56</y>
                    <width>112</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2e84c611efbc7dc28239ba6b76</id>
                <name><![CDATA[Out [10] - P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[10]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[10]]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>112</x>
                    <y>56</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e2f84c611ef8482c28239ba6b76</id>
                <name><![CDATA[Out [11] - Q]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[11]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[11]]]></signal_name>
                <unit><![CDATA[VAr]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>256</x>
                    <y>56</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e3084c611ef90a4c28239ba6b76</id>
                <name><![CDATA[Out [12] - S]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[12]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[12]]]></signal_name>
                <unit><![CDATA[VA]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>80</x>
                    <y>112</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>94b35e3184c611efa98ac28239ba6b76</id>
                <name><![CDATA[Out [13] - pf]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_outputs + "Out[13]")
displayValue = x

]]></code>
                <signal_name><![CDATA[Out[13]]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>224</x>
                    <y>112</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[3]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>b231926f84ca11efa6a7c28239ba6b76</id>
                <name><![CDATA[trip]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('trip')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>480</x>
                    <y>464</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b8f577cb84ca11efbc12c28239ba6b76</id>
                <name><![CDATA[mem]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('mem')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>648</x>
                    <y>464</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>7d9d18b9898611ef903bc1a0ff940e8d</id>
                <name><![CDATA[output]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('output')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>816</x>
                    <y>464</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5a3e83fa908f11ef85a4f5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 1p_I_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 1p.I_RMS]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>240</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>60de8d08908f11efbceaf5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 1p_VLL_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 1p.VLL_RMS]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>312</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>6884529f908f11efb77cf5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 1p_POWER_P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 1p.POWER_P]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>864</x>
                    <y>376</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>7d0cec7d908f11efb2a6f5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 2p_I_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 2p.I_RMS]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1040</x>
                    <y>240</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>80efa630908f11efa192f5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 2p_POWER_P]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 2p.POWER_P]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1048</x>
                    <y>376</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>880119ed908f11efb619f5c9dfe40db0</id>
                <name><![CDATA[Three-phase Meter 2p_VLL_RMS]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Three-phase Meter 2p.VLL_RMS]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <scaling_factor>1.0</scaling_factor>
                <widget_settings>
                    <x>1040</x>
                    <y>304</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ab209cf2908f11efa403f5c9dfe40db0</id>
                <name><![CDATA[trip1]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('trip1')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>480</x>
                    <y>528</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b1068e9e908f11efab76f5c9dfe40db0</id>
                <name><![CDATA[mem1]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('mem1')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>648</x>
                    <y>528</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>bd20475e908f11efb9e6f5c9dfe40db0</id>
                <name><![CDATA[output1]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(hil.model_read('output1')),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>816</x>
                    <y>528</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>00aecee3909011efa48cf5c9dfe40db0</id>
                <name><![CDATA[Relay current p]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],

    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],

    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],

    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Three-phase Meter 1p.I_RMS']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <analog_signals_scaling_factors><![CDATA[{'Three-phase Meter 1p.I_RMS': 1.0}]]></analog_signals_scaling_factors>
                <streaming_analog_signals_scaling_factors><![CDATA[{}]]></streaming_analog_signals_scaling_factors>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>1072</x>
                    <y>504</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>